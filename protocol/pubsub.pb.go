// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pubsub.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LoginRequest_Version int32

const (
	LoginRequest_VERSION_INVALID LoginRequest_Version = 0
	LoginRequest_VERSION_CURRENT LoginRequest_Version = 20181205
)

var LoginRequest_Version_name = map[int32]string{
	0:        "VERSION_INVALID",
	20181205: "VERSION_CURRENT",
}
var LoginRequest_Version_value = map[string]int32{
	"VERSION_INVALID": 0,
	"VERSION_CURRENT": 20181205,
}

func (x LoginRequest_Version) String() string {
	return proto.EnumName(LoginRequest_Version_name, int32(x))
}
func (LoginRequest_Version) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{0, 0}
}

type LoginRequest_Role int32

const (
	LoginRequest_ROLE_NONE          LoginRequest_Role = 0
	LoginRequest_ROLE_PUBLISHER     LoginRequest_Role = 1
	LoginRequest_ROLE_SUBSCRIBER    LoginRequest_Role = 2
	LoginRequest_ROLE_MONITOR       LoginRequest_Role = 4
	LoginRequest_ROLE_ADMINISTRATOR LoginRequest_Role = 8
)

var LoginRequest_Role_name = map[int32]string{
	0: "ROLE_NONE",
	1: "ROLE_PUBLISHER",
	2: "ROLE_SUBSCRIBER",
	4: "ROLE_MONITOR",
	8: "ROLE_ADMINISTRATOR",
}
var LoginRequest_Role_value = map[string]int32{
	"ROLE_NONE":          0,
	"ROLE_PUBLISHER":     1,
	"ROLE_SUBSCRIBER":    2,
	"ROLE_MONITOR":       4,
	"ROLE_ADMINISTRATOR": 8,
}

func (x LoginRequest_Role) String() string {
	return proto.EnumName(LoginRequest_Role_name, int32(x))
}
func (LoginRequest_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{0, 1}
}

type LoginRequest struct {
	ProtocolVersion LoginRequest_Version `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3,enum=protocol.LoginRequest_Version" json:"protocol_version,omitempty"`
	Id              string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Password        string               `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Role            LoginRequest_Role    `protobuf:"varint,4,opt,name=role,proto3,enum=protocol.LoginRequest_Role" json:"role,omitempty"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{0}
}
func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(dst, src)
}
func (m *LoginRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetProtocolVersion() LoginRequest_Version {
	if m != nil {
		return m.ProtocolVersion
	}
	return LoginRequest_VERSION_INVALID
}

func (m *LoginRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *LoginRequest) GetRole() LoginRequest_Role {
	if m != nil {
		return m.Role
	}
	return LoginRequest_ROLE_NONE
}

type LoginResponse struct {
	OK                           bool                       `protobuf:"varint,1,opt,name=OK,proto3" json:"OK,omitempty"`
	Message                      string                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Token                        string                     `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	PublisherSubscriberMonitorId string                     `protobuf:"bytes,4,opt,name=publisher_subscriber_monitor_id,json=publisherSubscriberMonitorId,proto3" json:"publisher_subscriber_monitor_id,omitempty"`
	Negotiation                  *LoginResponse_Negotiation `protobuf:"bytes,5,opt,name=negotiation" json:"negotiation,omitempty"`
}

func (m *LoginResponse) Reset()         { *m = LoginResponse{} }
func (m *LoginResponse) String() string { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()    {}
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{1}
}
func (m *LoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse.Merge(dst, src)
}
func (m *LoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse proto.InternalMessageInfo

func (m *LoginResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

func (m *LoginResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LoginResponse) GetPublisherSubscriberMonitorId() string {
	if m != nil {
		return m.PublisherSubscriberMonitorId
	}
	return ""
}

func (m *LoginResponse) GetNegotiation() *LoginResponse_Negotiation {
	if m != nil {
		return m.Negotiation
	}
	return nil
}

type LoginResponse_Negotiation struct {
	PingPeriod        uint32 `protobuf:"varint,1,opt,name=ping_period,json=pingPeriod,proto3" json:"ping_period,omitempty"`
	MaximumPacketSize uint32 `protobuf:"varint,2,opt,name=maximum_packet_size,json=maximumPacketSize,proto3" json:"maximum_packet_size,omitempty"`
	MaximumChunkSize  uint32 `protobuf:"varint,3,opt,name=maximum_chunk_size,json=maximumChunkSize,proto3" json:"maximum_chunk_size,omitempty"`
}

func (m *LoginResponse_Negotiation) Reset()         { *m = LoginResponse_Negotiation{} }
func (m *LoginResponse_Negotiation) String() string { return proto.CompactTextString(m) }
func (*LoginResponse_Negotiation) ProtoMessage()    {}
func (*LoginResponse_Negotiation) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{1, 0}
}
func (m *LoginResponse_Negotiation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginResponse_Negotiation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginResponse_Negotiation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoginResponse_Negotiation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse_Negotiation.Merge(dst, src)
}
func (m *LoginResponse_Negotiation) XXX_Size() int {
	return m.Size()
}
func (m *LoginResponse_Negotiation) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse_Negotiation.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse_Negotiation proto.InternalMessageInfo

func (m *LoginResponse_Negotiation) GetPingPeriod() uint32 {
	if m != nil {
		return m.PingPeriod
	}
	return 0
}

func (m *LoginResponse_Negotiation) GetMaximumPacketSize() uint32 {
	if m != nil {
		return m.MaximumPacketSize
	}
	return 0
}

func (m *LoginResponse_Negotiation) GetMaximumChunkSize() uint32 {
	if m != nil {
		return m.MaximumChunkSize
	}
	return 0
}

type CreateTopicRequest struct {
	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	TopicName string `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
}

func (m *CreateTopicRequest) Reset()         { *m = CreateTopicRequest{} }
func (m *CreateTopicRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTopicRequest) ProtoMessage()    {}
func (*CreateTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{2}
}
func (m *CreateTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTopicRequest.Merge(dst, src)
}
func (m *CreateTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTopicRequest proto.InternalMessageInfo

func (m *CreateTopicRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CreateTopicRequest) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

type CreateTopicResponse struct {
	OK      bool   `protobuf:"varint,1,opt,name=OK,proto3" json:"OK,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *CreateTopicResponse) Reset()         { *m = CreateTopicResponse{} }
func (m *CreateTopicResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTopicResponse) ProtoMessage()    {}
func (*CreateTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{3}
}
func (m *CreateTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTopicResponse.Merge(dst, src)
}
func (m *CreateTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTopicResponse proto.InternalMessageInfo

func (m *CreateTopicResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

func (m *CreateTopicResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DestroyTopicRequest struct {
	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	TopicName string `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
}

func (m *DestroyTopicRequest) Reset()         { *m = DestroyTopicRequest{} }
func (m *DestroyTopicRequest) String() string { return proto.CompactTextString(m) }
func (*DestroyTopicRequest) ProtoMessage()    {}
func (*DestroyTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{4}
}
func (m *DestroyTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DestroyTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DestroyTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DestroyTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DestroyTopicRequest.Merge(dst, src)
}
func (m *DestroyTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *DestroyTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DestroyTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DestroyTopicRequest proto.InternalMessageInfo

func (m *DestroyTopicRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *DestroyTopicRequest) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

type DestroyTopicResponse struct {
	OK      bool   `protobuf:"varint,1,opt,name=OK,proto3" json:"OK,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *DestroyTopicResponse) Reset()         { *m = DestroyTopicResponse{} }
func (m *DestroyTopicResponse) String() string { return proto.CompactTextString(m) }
func (*DestroyTopicResponse) ProtoMessage()    {}
func (*DestroyTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{5}
}
func (m *DestroyTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DestroyTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DestroyTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DestroyTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DestroyTopicResponse.Merge(dst, src)
}
func (m *DestroyTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *DestroyTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DestroyTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DestroyTopicResponse proto.InternalMessageInfo

func (m *DestroyTopicResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

func (m *DestroyTopicResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PublishRequest struct {
	Token                string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	TopicName            string `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	UniqueSequenceNumber uint64 `protobuf:"varint,4,opt,name=unique_sequence_number,json=uniqueSequenceNumber,proto3" json:"unique_sequence_number,omitempty"`
	Start                bool   `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`
	End                  bool   `protobuf:"varint,6,opt,name=end,proto3" json:"end,omitempty"`
	Payload              []byte `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{6}
}
func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(dst, src)
}
func (m *PublishRequest) XXX_Size() int {
	return m.Size()
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PublishRequest) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *PublishRequest) GetUniqueSequenceNumber() uint64 {
	if m != nil {
		return m.UniqueSequenceNumber
	}
	return 0
}

func (m *PublishRequest) GetStart() bool {
	if m != nil {
		return m.Start
	}
	return false
}

func (m *PublishRequest) GetEnd() bool {
	if m != nil {
		return m.End
	}
	return false
}

func (m *PublishRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type PublishResponse struct {
	OK                   bool   `protobuf:"varint,1,opt,name=OK,proto3" json:"OK,omitempty"`
	Message              string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	UniqueSequenceNumber uint64 `protobuf:"varint,4,opt,name=unique_sequence_number,json=uniqueSequenceNumber,proto3" json:"unique_sequence_number,omitempty"`
	Start                bool   `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`
	End                  bool   `protobuf:"varint,6,opt,name=end,proto3" json:"end,omitempty"`
	Payload              []byte `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{7}
}
func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(dst, src)
}
func (m *PublishResponse) XXX_Size() int {
	return m.Size()
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

func (m *PublishResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PublishResponse) GetUniqueSequenceNumber() uint64 {
	if m != nil {
		return m.UniqueSequenceNumber
	}
	return 0
}

func (m *PublishResponse) GetStart() bool {
	if m != nil {
		return m.Start
	}
	return false
}

func (m *PublishResponse) GetEnd() bool {
	if m != nil {
		return m.End
	}
	return false
}

func (m *PublishResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SubscribeRequest struct {
	Token                string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	TopicName            string `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	UniqueSequenceNumber uint64 `protobuf:"varint,4,opt,name=unique_sequence_number,json=uniqueSequenceNumber,proto3" json:"unique_sequence_number,omitempty"`
	Start                bool   `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`
	End                  bool   `protobuf:"varint,6,opt,name=end,proto3" json:"end,omitempty"`
	Payload              []byte `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{8}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(dst, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SubscribeRequest) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *SubscribeRequest) GetUniqueSequenceNumber() uint64 {
	if m != nil {
		return m.UniqueSequenceNumber
	}
	return 0
}

func (m *SubscribeRequest) GetStart() bool {
	if m != nil {
		return m.Start
	}
	return false
}

func (m *SubscribeRequest) GetEnd() bool {
	if m != nil {
		return m.End
	}
	return false
}

func (m *SubscribeRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SubscribeResponse struct {
	OK                   bool   `protobuf:"varint,1,opt,name=OK,proto3" json:"OK,omitempty"`
	Message              string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	UniqueSequenceNumber uint64 `protobuf:"varint,4,opt,name=unique_sequence_number,json=uniqueSequenceNumber,proto3" json:"unique_sequence_number,omitempty"`
	Start                bool   `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`
	End                  bool   `protobuf:"varint,6,opt,name=end,proto3" json:"end,omitempty"`
	Payload              []byte `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{9}
}
func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(dst, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

func (m *SubscribeResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SubscribeResponse) GetUniqueSequenceNumber() uint64 {
	if m != nil {
		return m.UniqueSequenceNumber
	}
	return 0
}

func (m *SubscribeResponse) GetStart() bool {
	if m != nil {
		return m.Start
	}
	return false
}

func (m *SubscribeResponse) GetEnd() bool {
	if m != nil {
		return m.End
	}
	return false
}

func (m *SubscribeResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type StatusRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *StatusRequest) Reset()         { *m = StatusRequest{} }
func (m *StatusRequest) String() string { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()    {}
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{10}
}
func (m *StatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRequest.Merge(dst, src)
}
func (m *StatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRequest proto.InternalMessageInfo

func (m *StatusRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type StatusResponse struct {
	OK                       bool   `protobuf:"varint,1,opt,name=OK,proto3" json:"OK,omitempty"`
	Message                  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	CreatedDatetime          string `protobuf:"bytes,3,opt,name=created_datetime,json=createdDatetime,proto3" json:"created_datetime,omitempty"`
	LastUsedDatetime         string `protobuf:"bytes,4,opt,name=last_used_datetime,json=lastUsedDatetime,proto3" json:"last_used_datetime,omitempty"`
	UsedMemory               uint32 `protobuf:"varint,5,opt,name=used_memory,json=usedMemory,proto3" json:"used_memory,omitempty"`
	TotalMemory              uint32 `protobuf:"varint,6,opt,name=total_memory,json=totalMemory,proto3" json:"total_memory,omitempty"`
	UsedDisk                 uint32 `protobuf:"varint,7,opt,name=used_disk,json=usedDisk,proto3" json:"used_disk,omitempty"`
	TotalDisk                uint32 `protobuf:"varint,8,opt,name=total_disk,json=totalDisk,proto3" json:"total_disk,omitempty"`
	NumberOfGoroutines       uint32 `protobuf:"varint,9,opt,name=number_of_goroutines,json=numberOfGoroutines,proto3" json:"number_of_goroutines,omitempty"`
	NumberOfTopics           uint32 `protobuf:"varint,10,opt,name=number_of_topics,json=numberOfTopics,proto3" json:"number_of_topics,omitempty"`
	NumberOfPublisher        uint32 `protobuf:"varint,11,opt,name=number_of_publisher,json=numberOfPublisher,proto3" json:"number_of_publisher,omitempty"`
	NumberOfSubscriber       uint32 `protobuf:"varint,12,opt,name=number_of_subscriber,json=numberOfSubscriber,proto3" json:"number_of_subscriber,omitempty"`
	NumberOfProcessedStreams uint32 `protobuf:"varint,13,opt,name=number_of_processed_streams,json=numberOfProcessedStreams,proto3" json:"number_of_processed_streams,omitempty"`
	NumberOfProcessedPackets uint32 `protobuf:"varint,14,opt,name=number_of_processed_packets,json=numberOfProcessedPackets,proto3" json:"number_of_processed_packets,omitempty"`
	SizeOfProcessedPackets   uint32 `protobuf:"varint,15,opt,name=size_of_processed_packets,json=sizeOfProcessedPackets,proto3" json:"size_of_processed_packets,omitempty"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{11}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(dst, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

func (m *StatusResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *StatusResponse) GetCreatedDatetime() string {
	if m != nil {
		return m.CreatedDatetime
	}
	return ""
}

func (m *StatusResponse) GetLastUsedDatetime() string {
	if m != nil {
		return m.LastUsedDatetime
	}
	return ""
}

func (m *StatusResponse) GetUsedMemory() uint32 {
	if m != nil {
		return m.UsedMemory
	}
	return 0
}

func (m *StatusResponse) GetTotalMemory() uint32 {
	if m != nil {
		return m.TotalMemory
	}
	return 0
}

func (m *StatusResponse) GetUsedDisk() uint32 {
	if m != nil {
		return m.UsedDisk
	}
	return 0
}

func (m *StatusResponse) GetTotalDisk() uint32 {
	if m != nil {
		return m.TotalDisk
	}
	return 0
}

func (m *StatusResponse) GetNumberOfGoroutines() uint32 {
	if m != nil {
		return m.NumberOfGoroutines
	}
	return 0
}

func (m *StatusResponse) GetNumberOfTopics() uint32 {
	if m != nil {
		return m.NumberOfTopics
	}
	return 0
}

func (m *StatusResponse) GetNumberOfPublisher() uint32 {
	if m != nil {
		return m.NumberOfPublisher
	}
	return 0
}

func (m *StatusResponse) GetNumberOfSubscriber() uint32 {
	if m != nil {
		return m.NumberOfSubscriber
	}
	return 0
}

func (m *StatusResponse) GetNumberOfProcessedStreams() uint32 {
	if m != nil {
		return m.NumberOfProcessedStreams
	}
	return 0
}

func (m *StatusResponse) GetNumberOfProcessedPackets() uint32 {
	if m != nil {
		return m.NumberOfProcessedPackets
	}
	return 0
}

func (m *StatusResponse) GetSizeOfProcessedPackets() uint32 {
	if m != nil {
		return m.SizeOfProcessedPackets
	}
	return 0
}

type StatisticsRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *StatisticsRequest) Reset()         { *m = StatisticsRequest{} }
func (m *StatisticsRequest) String() string { return proto.CompactTextString(m) }
func (*StatisticsRequest) ProtoMessage()    {}
func (*StatisticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{12}
}
func (m *StatisticsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatisticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatisticsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StatisticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatisticsRequest.Merge(dst, src)
}
func (m *StatisticsRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatisticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatisticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatisticsRequest proto.InternalMessageInfo

func (m *StatisticsRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type StatisticsResponse struct {
	OK      bool                        `protobuf:"varint,1,opt,name=OK,proto3" json:"OK,omitempty"`
	Message string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Topics  []*StatisticsResponse_Topic `protobuf:"bytes,3,rep,name=topics" json:"topics,omitempty"`
}

func (m *StatisticsResponse) Reset()         { *m = StatisticsResponse{} }
func (m *StatisticsResponse) String() string { return proto.CompactTextString(m) }
func (*StatisticsResponse) ProtoMessage()    {}
func (*StatisticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{13}
}
func (m *StatisticsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatisticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatisticsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StatisticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatisticsResponse.Merge(dst, src)
}
func (m *StatisticsResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatisticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatisticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatisticsResponse proto.InternalMessageInfo

func (m *StatisticsResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

func (m *StatisticsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *StatisticsResponse) GetTopics() []*StatisticsResponse_Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

type StatisticsResponse_PublisherSubscriber struct {
	NumberOfProcessedStreams uint32 `protobuf:"varint,2,opt,name=number_of_processed_streams,json=numberOfProcessedStreams,proto3" json:"number_of_processed_streams,omitempty"`
	NumberOfProcessedPackets uint32 `protobuf:"varint,3,opt,name=number_of_processed_packets,json=numberOfProcessedPackets,proto3" json:"number_of_processed_packets,omitempty"`
}

func (m *StatisticsResponse_PublisherSubscriber) Reset() {
	*m = StatisticsResponse_PublisherSubscriber{}
}
func (m *StatisticsResponse_PublisherSubscriber) String() string { return proto.CompactTextString(m) }
func (*StatisticsResponse_PublisherSubscriber) ProtoMessage()    {}
func (*StatisticsResponse_PublisherSubscriber) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{13, 0}
}
func (m *StatisticsResponse_PublisherSubscriber) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatisticsResponse_PublisherSubscriber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatisticsResponse_PublisherSubscriber.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StatisticsResponse_PublisherSubscriber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatisticsResponse_PublisherSubscriber.Merge(dst, src)
}
func (m *StatisticsResponse_PublisherSubscriber) XXX_Size() int {
	return m.Size()
}
func (m *StatisticsResponse_PublisherSubscriber) XXX_DiscardUnknown() {
	xxx_messageInfo_StatisticsResponse_PublisherSubscriber.DiscardUnknown(m)
}

var xxx_messageInfo_StatisticsResponse_PublisherSubscriber proto.InternalMessageInfo

func (m *StatisticsResponse_PublisherSubscriber) GetNumberOfProcessedStreams() uint32 {
	if m != nil {
		return m.NumberOfProcessedStreams
	}
	return 0
}

func (m *StatisticsResponse_PublisherSubscriber) GetNumberOfProcessedPackets() uint32 {
	if m != nil {
		return m.NumberOfProcessedPackets
	}
	return 0
}

type StatisticsResponse_Topic struct {
	Name                     string                                             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CreatedDatetime          string                                             `protobuf:"bytes,2,opt,name=created_datetime,json=createdDatetime,proto3" json:"created_datetime,omitempty"`
	LastUsedDatetime         string                                             `protobuf:"bytes,3,opt,name=last_used_datetime,json=lastUsedDatetime,proto3" json:"last_used_datetime,omitempty"`
	Publishers               map[string]*StatisticsResponse_PublisherSubscriber `protobuf:"bytes,4,rep,name=publishers" json:"publishers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Subscribers              map[string]*StatisticsResponse_PublisherSubscriber `protobuf:"bytes,5,rep,name=subscribers" json:"subscribers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	NumberOfProcessedStreams uint32                                             `protobuf:"varint,6,opt,name=number_of_processed_streams,json=numberOfProcessedStreams,proto3" json:"number_of_processed_streams,omitempty"`
	NumberOfProcessedPackets uint32                                             `protobuf:"varint,7,opt,name=number_of_processed_packets,json=numberOfProcessedPackets,proto3" json:"number_of_processed_packets,omitempty"`
	SizeOfProcessedPackets   uint32                                             `protobuf:"varint,8,opt,name=size_of_processed_packets,json=sizeOfProcessedPackets,proto3" json:"size_of_processed_packets,omitempty"`
}

func (m *StatisticsResponse_Topic) Reset()         { *m = StatisticsResponse_Topic{} }
func (m *StatisticsResponse_Topic) String() string { return proto.CompactTextString(m) }
func (*StatisticsResponse_Topic) ProtoMessage()    {}
func (*StatisticsResponse_Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_pubsub_649d9887ff825362, []int{13, 1}
}
func (m *StatisticsResponse_Topic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatisticsResponse_Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatisticsResponse_Topic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StatisticsResponse_Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatisticsResponse_Topic.Merge(dst, src)
}
func (m *StatisticsResponse_Topic) XXX_Size() int {
	return m.Size()
}
func (m *StatisticsResponse_Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_StatisticsResponse_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_StatisticsResponse_Topic proto.InternalMessageInfo

func (m *StatisticsResponse_Topic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StatisticsResponse_Topic) GetCreatedDatetime() string {
	if m != nil {
		return m.CreatedDatetime
	}
	return ""
}

func (m *StatisticsResponse_Topic) GetLastUsedDatetime() string {
	if m != nil {
		return m.LastUsedDatetime
	}
	return ""
}

func (m *StatisticsResponse_Topic) GetPublishers() map[string]*StatisticsResponse_PublisherSubscriber {
	if m != nil {
		return m.Publishers
	}
	return nil
}

func (m *StatisticsResponse_Topic) GetSubscribers() map[string]*StatisticsResponse_PublisherSubscriber {
	if m != nil {
		return m.Subscribers
	}
	return nil
}

func (m *StatisticsResponse_Topic) GetNumberOfProcessedStreams() uint32 {
	if m != nil {
		return m.NumberOfProcessedStreams
	}
	return 0
}

func (m *StatisticsResponse_Topic) GetNumberOfProcessedPackets() uint32 {
	if m != nil {
		return m.NumberOfProcessedPackets
	}
	return 0
}

func (m *StatisticsResponse_Topic) GetSizeOfProcessedPackets() uint32 {
	if m != nil {
		return m.SizeOfProcessedPackets
	}
	return 0
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "protocol.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "protocol.LoginResponse")
	proto.RegisterType((*LoginResponse_Negotiation)(nil), "protocol.LoginResponse.Negotiation")
	proto.RegisterType((*CreateTopicRequest)(nil), "protocol.CreateTopicRequest")
	proto.RegisterType((*CreateTopicResponse)(nil), "protocol.CreateTopicResponse")
	proto.RegisterType((*DestroyTopicRequest)(nil), "protocol.DestroyTopicRequest")
	proto.RegisterType((*DestroyTopicResponse)(nil), "protocol.DestroyTopicResponse")
	proto.RegisterType((*PublishRequest)(nil), "protocol.PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "protocol.PublishResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "protocol.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "protocol.SubscribeResponse")
	proto.RegisterType((*StatusRequest)(nil), "protocol.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "protocol.StatusResponse")
	proto.RegisterType((*StatisticsRequest)(nil), "protocol.StatisticsRequest")
	proto.RegisterType((*StatisticsResponse)(nil), "protocol.StatisticsResponse")
	proto.RegisterType((*StatisticsResponse_PublisherSubscriber)(nil), "protocol.StatisticsResponse.PublisherSubscriber")
	proto.RegisterType((*StatisticsResponse_Topic)(nil), "protocol.StatisticsResponse.Topic")
	proto.RegisterMapType((map[string]*StatisticsResponse_PublisherSubscriber)(nil), "protocol.StatisticsResponse.Topic.PublishersEntry")
	proto.RegisterMapType((map[string]*StatisticsResponse_PublisherSubscriber)(nil), "protocol.StatisticsResponse.Topic.SubscribersEntry")
	proto.RegisterEnum("protocol.LoginRequest_Version", LoginRequest_Version_name, LoginRequest_Version_value)
	proto.RegisterEnum("protocol.LoginRequest_Role", LoginRequest_Role_name, LoginRequest_Role_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WormholeClient is the client API for Wormhole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WormholeClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error)
	DestroyTopic(ctx context.Context, in *DestroyTopicRequest, opts ...grpc.CallOption) (*DestroyTopicResponse, error)
	Publish(ctx context.Context, opts ...grpc.CallOption) (Wormhole_PublishClient, error)
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (Wormhole_SubscribeClient, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Statistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error)
}

type wormholeClient struct {
	cc *grpc.ClientConn
}

func NewWormholeClient(cc *grpc.ClientConn) WormholeClient {
	return &wormholeClient{cc}
}

func (c *wormholeClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/protocol.Wormhole/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wormholeClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error) {
	out := new(CreateTopicResponse)
	err := c.cc.Invoke(ctx, "/protocol.Wormhole/CreateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wormholeClient) DestroyTopic(ctx context.Context, in *DestroyTopicRequest, opts ...grpc.CallOption) (*DestroyTopicResponse, error) {
	out := new(DestroyTopicResponse)
	err := c.cc.Invoke(ctx, "/protocol.Wormhole/DestroyTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wormholeClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Wormhole_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Wormhole_serviceDesc.Streams[0], "/protocol.Wormhole/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &wormholePublishClient{stream}
	return x, nil
}

type Wormhole_PublishClient interface {
	Send(*PublishRequest) error
	Recv() (*PublishResponse, error)
	grpc.ClientStream
}

type wormholePublishClient struct {
	grpc.ClientStream
}

func (x *wormholePublishClient) Send(m *PublishRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wormholePublishClient) Recv() (*PublishResponse, error) {
	m := new(PublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wormholeClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (Wormhole_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Wormhole_serviceDesc.Streams[1], "/protocol.Wormhole/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &wormholeSubscribeClient{stream}
	return x, nil
}

type Wormhole_SubscribeClient interface {
	Send(*SubscribeRequest) error
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type wormholeSubscribeClient struct {
	grpc.ClientStream
}

func (x *wormholeSubscribeClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wormholeSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wormholeClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/protocol.Wormhole/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wormholeClient) Statistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error) {
	out := new(StatisticsResponse)
	err := c.cc.Invoke(ctx, "/protocol.Wormhole/Statistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WormholeServer is the server API for Wormhole service.
type WormholeServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error)
	DestroyTopic(context.Context, *DestroyTopicRequest) (*DestroyTopicResponse, error)
	Publish(Wormhole_PublishServer) error
	Subscribe(Wormhole_SubscribeServer) error
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	Statistics(context.Context, *StatisticsRequest) (*StatisticsResponse, error)
}

func RegisterWormholeServer(s *grpc.Server, srv WormholeServer) {
	s.RegisterService(&_Wormhole_serviceDesc, srv)
}

func _Wormhole_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WormholeServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wormhole/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WormholeServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wormhole_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WormholeServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wormhole/CreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WormholeServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wormhole_DestroyTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WormholeServer).DestroyTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wormhole/DestroyTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WormholeServer).DestroyTopic(ctx, req.(*DestroyTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wormhole_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WormholeServer).Publish(&wormholePublishServer{stream})
}

type Wormhole_PublishServer interface {
	Send(*PublishResponse) error
	Recv() (*PublishRequest, error)
	grpc.ServerStream
}

type wormholePublishServer struct {
	grpc.ServerStream
}

func (x *wormholePublishServer) Send(m *PublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wormholePublishServer) Recv() (*PublishRequest, error) {
	m := new(PublishRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Wormhole_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WormholeServer).Subscribe(&wormholeSubscribeServer{stream})
}

type Wormhole_SubscribeServer interface {
	Send(*SubscribeResponse) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type wormholeSubscribeServer struct {
	grpc.ServerStream
}

func (x *wormholeSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wormholeSubscribeServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Wormhole_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WormholeServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wormhole/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WormholeServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wormhole_Statistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WormholeServer).Statistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wormhole/Statistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WormholeServer).Statistics(ctx, req.(*StatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wormhole_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Wormhole",
	HandlerType: (*WormholeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Wormhole_Login_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _Wormhole_CreateTopic_Handler,
		},
		{
			MethodName: "DestroyTopic",
			Handler:    _Wormhole_DestroyTopic_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Wormhole_Status_Handler,
		},
		{
			MethodName: "Statistics",
			Handler:    _Wormhole_Statistics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _Wormhole_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Wormhole_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pubsub.proto",
}

func (m *LoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProtocolVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.ProtocolVersion))
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if m.Role != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.Role))
	}
	return i, nil
}

func (m *LoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.PublisherSubscriberMonitorId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.PublisherSubscriberMonitorId)))
		i += copy(dAtA[i:], m.PublisherSubscriberMonitorId)
	}
	if m.Negotiation != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.Negotiation.Size()))
		n1, err := m.Negotiation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *LoginResponse_Negotiation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResponse_Negotiation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PingPeriod != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.PingPeriod))
	}
	if m.MaximumPacketSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.MaximumPacketSize))
	}
	if m.MaximumChunkSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.MaximumChunkSize))
	}
	return i, nil
}

func (m *CreateTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.TopicName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.TopicName)))
		i += copy(dAtA[i:], m.TopicName)
	}
	return i, nil
}

func (m *CreateTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *DestroyTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DestroyTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.TopicName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.TopicName)))
		i += copy(dAtA[i:], m.TopicName)
	}
	return i, nil
}

func (m *DestroyTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DestroyTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *PublishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.TopicName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.TopicName)))
		i += copy(dAtA[i:], m.TopicName)
	}
	if m.UniqueSequenceNumber != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.UniqueSequenceNumber))
	}
	if m.Start {
		dAtA[i] = 0x28
		i++
		if m.Start {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.End {
		dAtA[i] = 0x30
		i++
		if m.End {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *PublishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.UniqueSequenceNumber != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.UniqueSequenceNumber))
	}
	if m.Start {
		dAtA[i] = 0x28
		i++
		if m.Start {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.End {
		dAtA[i] = 0x30
		i++
		if m.End {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *SubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.TopicName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.TopicName)))
		i += copy(dAtA[i:], m.TopicName)
	}
	if m.UniqueSequenceNumber != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.UniqueSequenceNumber))
	}
	if m.Start {
		dAtA[i] = 0x28
		i++
		if m.Start {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.End {
		dAtA[i] = 0x30
		i++
		if m.End {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *SubscribeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.UniqueSequenceNumber != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.UniqueSequenceNumber))
	}
	if m.Start {
		dAtA[i] = 0x28
		i++
		if m.Start {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.End {
		dAtA[i] = 0x30
		i++
		if m.End {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *StatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.CreatedDatetime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.CreatedDatetime)))
		i += copy(dAtA[i:], m.CreatedDatetime)
	}
	if len(m.LastUsedDatetime) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.LastUsedDatetime)))
		i += copy(dAtA[i:], m.LastUsedDatetime)
	}
	if m.UsedMemory != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.UsedMemory))
	}
	if m.TotalMemory != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.TotalMemory))
	}
	if m.UsedDisk != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.UsedDisk))
	}
	if m.TotalDisk != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.TotalDisk))
	}
	if m.NumberOfGoroutines != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.NumberOfGoroutines))
	}
	if m.NumberOfTopics != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.NumberOfTopics))
	}
	if m.NumberOfPublisher != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.NumberOfPublisher))
	}
	if m.NumberOfSubscriber != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.NumberOfSubscriber))
	}
	if m.NumberOfProcessedStreams != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.NumberOfProcessedStreams))
	}
	if m.NumberOfProcessedPackets != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.NumberOfProcessedPackets))
	}
	if m.SizeOfProcessedPackets != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.SizeOfProcessedPackets))
	}
	return i, nil
}

func (m *StatisticsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatisticsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *StatisticsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatisticsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Topics) > 0 {
		for _, msg := range m.Topics {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPubsub(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StatisticsResponse_PublisherSubscriber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatisticsResponse_PublisherSubscriber) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumberOfProcessedStreams != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.NumberOfProcessedStreams))
	}
	if m.NumberOfProcessedPackets != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.NumberOfProcessedPackets))
	}
	return i, nil
}

func (m *StatisticsResponse_Topic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatisticsResponse_Topic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.CreatedDatetime) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.CreatedDatetime)))
		i += copy(dAtA[i:], m.CreatedDatetime)
	}
	if len(m.LastUsedDatetime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(len(m.LastUsedDatetime)))
		i += copy(dAtA[i:], m.LastUsedDatetime)
	}
	if len(m.Publishers) > 0 {
		for k, _ := range m.Publishers {
			dAtA[i] = 0x22
			i++
			v := m.Publishers[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovPubsub(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovPubsub(uint64(len(k))) + msgSize
			i = encodeVarintPubsub(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPubsub(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintPubsub(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if len(m.Subscribers) > 0 {
		for k, _ := range m.Subscribers {
			dAtA[i] = 0x2a
			i++
			v := m.Subscribers[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovPubsub(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovPubsub(uint64(len(k))) + msgSize
			i = encodeVarintPubsub(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPubsub(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintPubsub(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	if m.NumberOfProcessedStreams != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.NumberOfProcessedStreams))
	}
	if m.NumberOfProcessedPackets != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.NumberOfProcessedPackets))
	}
	if m.SizeOfProcessedPackets != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPubsub(dAtA, i, uint64(m.SizeOfProcessedPackets))
	}
	return i, nil
}

func encodeVarintPubsub(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LoginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolVersion != 0 {
		n += 1 + sovPubsub(uint64(m.ProtocolVersion))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovPubsub(uint64(m.Role))
	}
	return n
}

func (m *LoginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.PublisherSubscriberMonitorId)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.Negotiation != nil {
		l = m.Negotiation.Size()
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func (m *LoginResponse_Negotiation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PingPeriod != 0 {
		n += 1 + sovPubsub(uint64(m.PingPeriod))
	}
	if m.MaximumPacketSize != 0 {
		n += 1 + sovPubsub(uint64(m.MaximumPacketSize))
	}
	if m.MaximumChunkSize != 0 {
		n += 1 + sovPubsub(uint64(m.MaximumChunkSize))
	}
	return n
}

func (m *CreateTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.TopicName)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func (m *CreateTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func (m *DestroyTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.TopicName)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func (m *DestroyTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func (m *PublishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.TopicName)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.UniqueSequenceNumber != 0 {
		n += 1 + sovPubsub(uint64(m.UniqueSequenceNumber))
	}
	if m.Start {
		n += 2
	}
	if m.End {
		n += 2
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func (m *PublishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.UniqueSequenceNumber != 0 {
		n += 1 + sovPubsub(uint64(m.UniqueSequenceNumber))
	}
	if m.Start {
		n += 2
	}
	if m.End {
		n += 2
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func (m *SubscribeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.TopicName)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.UniqueSequenceNumber != 0 {
		n += 1 + sovPubsub(uint64(m.UniqueSequenceNumber))
	}
	if m.Start {
		n += 2
	}
	if m.End {
		n += 2
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func (m *SubscribeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.UniqueSequenceNumber != 0 {
		n += 1 + sovPubsub(uint64(m.UniqueSequenceNumber))
	}
	if m.Start {
		n += 2
	}
	if m.End {
		n += 2
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func (m *StatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.CreatedDatetime)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.LastUsedDatetime)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if m.UsedMemory != 0 {
		n += 1 + sovPubsub(uint64(m.UsedMemory))
	}
	if m.TotalMemory != 0 {
		n += 1 + sovPubsub(uint64(m.TotalMemory))
	}
	if m.UsedDisk != 0 {
		n += 1 + sovPubsub(uint64(m.UsedDisk))
	}
	if m.TotalDisk != 0 {
		n += 1 + sovPubsub(uint64(m.TotalDisk))
	}
	if m.NumberOfGoroutines != 0 {
		n += 1 + sovPubsub(uint64(m.NumberOfGoroutines))
	}
	if m.NumberOfTopics != 0 {
		n += 1 + sovPubsub(uint64(m.NumberOfTopics))
	}
	if m.NumberOfPublisher != 0 {
		n += 1 + sovPubsub(uint64(m.NumberOfPublisher))
	}
	if m.NumberOfSubscriber != 0 {
		n += 1 + sovPubsub(uint64(m.NumberOfSubscriber))
	}
	if m.NumberOfProcessedStreams != 0 {
		n += 1 + sovPubsub(uint64(m.NumberOfProcessedStreams))
	}
	if m.NumberOfProcessedPackets != 0 {
		n += 1 + sovPubsub(uint64(m.NumberOfProcessedPackets))
	}
	if m.SizeOfProcessedPackets != 0 {
		n += 1 + sovPubsub(uint64(m.SizeOfProcessedPackets))
	}
	return n
}

func (m *StatisticsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	return n
}

func (m *StatisticsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovPubsub(uint64(l))
		}
	}
	return n
}

func (m *StatisticsResponse_PublisherSubscriber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumberOfProcessedStreams != 0 {
		n += 1 + sovPubsub(uint64(m.NumberOfProcessedStreams))
	}
	if m.NumberOfProcessedPackets != 0 {
		n += 1 + sovPubsub(uint64(m.NumberOfProcessedPackets))
	}
	return n
}

func (m *StatisticsResponse_Topic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.CreatedDatetime)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	l = len(m.LastUsedDatetime)
	if l > 0 {
		n += 1 + l + sovPubsub(uint64(l))
	}
	if len(m.Publishers) > 0 {
		for k, v := range m.Publishers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPubsub(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPubsub(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPubsub(uint64(mapEntrySize))
		}
	}
	if len(m.Subscribers) > 0 {
		for k, v := range m.Subscribers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPubsub(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPubsub(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPubsub(uint64(mapEntrySize))
		}
	}
	if m.NumberOfProcessedStreams != 0 {
		n += 1 + sovPubsub(uint64(m.NumberOfProcessedStreams))
	}
	if m.NumberOfProcessedPackets != 0 {
		n += 1 + sovPubsub(uint64(m.NumberOfProcessedPackets))
	}
	if m.SizeOfProcessedPackets != 0 {
		n += 1 + sovPubsub(uint64(m.SizeOfProcessedPackets))
	}
	return n
}

func sovPubsub(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPubsub(x uint64) (n int) {
	return sovPubsub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolVersion", wireType)
			}
			m.ProtocolVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolVersion |= (LoginRequest_Version(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (LoginRequest_Role(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublisherSubscriberMonitorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublisherSubscriberMonitorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Negotiation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Negotiation == nil {
				m.Negotiation = &LoginResponse_Negotiation{}
			}
			if err := m.Negotiation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResponse_Negotiation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Negotiation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Negotiation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingPeriod", wireType)
			}
			m.PingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingPeriod |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumPacketSize", wireType)
			}
			m.MaximumPacketSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumPacketSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumChunkSize", wireType)
			}
			m.MaximumChunkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumChunkSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DestroyTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DestroyTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DestroyTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DestroyTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DestroyTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DestroyTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueSequenceNumber", wireType)
			}
			m.UniqueSequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueSequenceNumber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Start = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.End = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueSequenceNumber", wireType)
			}
			m.UniqueSequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueSequenceNumber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Start = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.End = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueSequenceNumber", wireType)
			}
			m.UniqueSequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueSequenceNumber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Start = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.End = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueSequenceNumber", wireType)
			}
			m.UniqueSequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueSequenceNumber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Start = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.End = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedDatetime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedDatetime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUsedDatetime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastUsedDatetime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedMemory", wireType)
			}
			m.UsedMemory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedMemory |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMemory", wireType)
			}
			m.TotalMemory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalMemory |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedDisk", wireType)
			}
			m.UsedDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedDisk |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDisk", wireType)
			}
			m.TotalDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDisk |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfGoroutines", wireType)
			}
			m.NumberOfGoroutines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfGoroutines |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfTopics", wireType)
			}
			m.NumberOfTopics = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfTopics |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfPublisher", wireType)
			}
			m.NumberOfPublisher = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfPublisher |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfSubscriber", wireType)
			}
			m.NumberOfSubscriber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfSubscriber |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfProcessedStreams", wireType)
			}
			m.NumberOfProcessedStreams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfProcessedStreams |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfProcessedPackets", wireType)
			}
			m.NumberOfProcessedPackets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfProcessedPackets |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeOfProcessedPackets", wireType)
			}
			m.SizeOfProcessedPackets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeOfProcessedPackets |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatisticsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatisticsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatisticsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatisticsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatisticsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatisticsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &StatisticsResponse_Topic{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatisticsResponse_PublisherSubscriber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublisherSubscriber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublisherSubscriber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfProcessedStreams", wireType)
			}
			m.NumberOfProcessedStreams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfProcessedStreams |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfProcessedPackets", wireType)
			}
			m.NumberOfProcessedPackets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfProcessedPackets |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatisticsResponse_Topic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Topic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Topic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedDatetime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedDatetime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUsedDatetime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastUsedDatetime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publishers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Publishers == nil {
				m.Publishers = make(map[string]*StatisticsResponse_PublisherSubscriber)
			}
			var mapkey string
			var mapvalue *StatisticsResponse_PublisherSubscriber
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPubsub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPubsub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPubsub
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPubsub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPubsub
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthPubsub
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StatisticsResponse_PublisherSubscriber{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPubsub(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPubsub
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Publishers[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubsub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subscribers == nil {
				m.Subscribers = make(map[string]*StatisticsResponse_PublisherSubscriber)
			}
			var mapkey string
			var mapvalue *StatisticsResponse_PublisherSubscriber
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPubsub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPubsub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPubsub
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPubsub
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPubsub
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthPubsub
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StatisticsResponse_PublisherSubscriber{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPubsub(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPubsub
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Subscribers[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfProcessedStreams", wireType)
			}
			m.NumberOfProcessedStreams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfProcessedStreams |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfProcessedPackets", wireType)
			}
			m.NumberOfProcessedPackets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfProcessedPackets |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeOfProcessedPackets", wireType)
			}
			m.SizeOfProcessedPackets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeOfProcessedPackets |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubsub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPubsub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPubsub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubsub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPubsub
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPubsub
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPubsub(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPubsub = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPubsub   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pubsub.proto", fileDescriptor_pubsub_649d9887ff825362) }

var fileDescriptor_pubsub_649d9887ff825362 = []byte{
	// 1259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0xfa, 0x47, 0x62, 0x3f, 0xff, 0xc8, 0x76, 0x12, 0xa5, 0xdb, 0x4d, 0xeb, 0xe6, 0xbb,
	0x5f, 0x21, 0xb9, 0x12, 0x32, 0x55, 0x8a, 0x10, 0x54, 0xaa, 0xa0, 0x49, 0x0c, 0x6c, 0x9b, 0xd8,
	0xd1, 0x38, 0x29, 0xc7, 0xd5, 0xda, 0x9e, 0x26, 0xab, 0x78, 0x77, 0xdc, 0x9d, 0xdd, 0x42, 0x7a,
	0xe3, 0x8a, 0x38, 0x20, 0xf1, 0xa7, 0x20, 0x4e, 0x08, 0x71, 0xe5, 0x04, 0xbd, 0x20, 0xf5, 0x08,
	0xcd, 0x95, 0x3f, 0x02, 0xcd, 0xcc, 0xfe, 0x32, 0xb1, 0x13, 0xa2, 0x48, 0xa0, 0x9e, 0xbc, 0xf3,
	0x3e, 0x9f, 0xf7, 0x66, 0xe6, 0x33, 0x6f, 0xe6, 0x3d, 0x43, 0x6d, 0x12, 0x0e, 0x58, 0x38, 0x68,
	0x4f, 0x7c, 0x1a, 0x50, 0x54, 0x16, 0x3f, 0x43, 0x3a, 0x36, 0x5e, 0xe5, 0xa1, 0xb6, 0x43, 0x0f,
	0x1d, 0x0f, 0x93, 0x67, 0x21, 0x61, 0x01, 0x32, 0x41, 0x8d, 0x41, 0xeb, 0x39, 0xf1, 0x99, 0x43,
	0x3d, 0x4d, 0x59, 0x57, 0x5a, 0x8d, 0x8d, 0x66, 0x3b, 0x06, 0xda, 0x59, 0x8f, 0xf6, 0x13, 0xc9,
	0xc2, 0x4b, 0x31, 0x1c, 0x19, 0x50, 0x03, 0xf2, 0xce, 0x48, 0xcb, 0xaf, 0x2b, 0xad, 0x0a, 0xce,
	0x3b, 0x23, 0xa4, 0x43, 0x79, 0x62, 0x33, 0xf6, 0x39, 0xf5, 0x47, 0x5a, 0x41, 0x58, 0x93, 0x31,
	0x7a, 0x07, 0x8a, 0x3e, 0x1d, 0x13, 0xad, 0x28, 0xa6, 0x5a, 0x9b, 0x33, 0x15, 0xa6, 0x63, 0x82,
	0x05, 0xd1, 0x78, 0x0f, 0x16, 0xe3, 0x79, 0x96, 0x61, 0xe9, 0x49, 0x07, 0xf7, 0xcd, 0x5e, 0xd7,
	0x32, 0xbb, 0x4f, 0x1e, 0xee, 0x98, 0xdb, 0x6a, 0x0e, 0xad, 0xa6, 0xc6, 0xad, 0x03, 0x8c, 0x3b,
	0xdd, 0x7d, 0xf5, 0xb7, 0x3f, 0x7e, 0xad, 0x18, 0x47, 0x50, 0xe4, 0x51, 0x50, 0x1d, 0x2a, 0xb8,
	0xb7, 0xd3, 0xb1, 0xba, 0xbd, 0x6e, 0x47, 0xcd, 0x21, 0x04, 0x0d, 0x31, 0xdc, 0x3b, 0xd8, 0xdc,
	0x31, 0xfb, 0x9f, 0x76, 0xb0, 0xaa, 0xf0, 0xb8, 0xc2, 0xd6, 0x3f, 0xd8, 0xec, 0x6f, 0x61, 0x73,
	0xb3, 0x83, 0xd5, 0x3c, 0x52, 0xa1, 0x26, 0x8c, 0xbb, 0xbd, 0xae, 0xb9, 0xdf, 0xc3, 0x6a, 0x11,
	0xad, 0x02, 0x12, 0x96, 0x87, 0xdb, 0xbb, 0x66, 0xd7, 0xec, 0xef, 0xe3, 0x87, 0xdc, 0x5e, 0x36,
	0xfe, 0xcc, 0x43, 0x3d, 0x5a, 0x3d, 0x9b, 0x50, 0x8f, 0x11, 0x2e, 0x48, 0xef, 0xb1, 0x50, 0xb3,
	0x8c, 0xf3, 0xbd, 0xc7, 0x48, 0x83, 0x45, 0x97, 0x30, 0x66, 0x1f, 0x92, 0x48, 0xa5, 0x78, 0x88,
	0x56, 0xa0, 0x14, 0xd0, 0x63, 0xe2, 0x45, 0x3a, 0xc9, 0x01, 0xea, 0xc0, 0xed, 0x49, 0x38, 0x18,
	0x3b, 0xec, 0x88, 0xf8, 0x16, 0x0b, 0x07, 0x6c, 0xe8, 0x3b, 0x03, 0xe2, 0x5b, 0x2e, 0xf5, 0x9c,
	0x80, 0xfa, 0x96, 0x33, 0x12, 0xfa, 0x55, 0xf0, 0xcd, 0x84, 0xd6, 0x4f, 0x58, 0xbb, 0x92, 0x64,
	0x8e, 0x50, 0x07, 0xaa, 0x1e, 0x39, 0xa4, 0x81, 0x63, 0x07, 0xfc, 0x74, 0x4b, 0xeb, 0x4a, 0xab,
	0xba, 0xf1, 0xff, 0x33, 0x92, 0xcb, 0x45, 0xb7, 0xbb, 0x29, 0x15, 0x67, 0xfd, 0xf4, 0xaf, 0x15,
	0xa8, 0x66, 0x40, 0x74, 0x1b, 0xaa, 0x13, 0xc7, 0x3b, 0xb4, 0x26, 0xc4, 0x77, 0xe8, 0x48, 0x6c,
	0xb3, 0x8e, 0x81, 0x9b, 0xf6, 0x84, 0x05, 0xb5, 0x61, 0xd9, 0xb5, 0xbf, 0x70, 0xdc, 0xd0, 0xb5,
	0x26, 0xf6, 0xf0, 0x98, 0x04, 0x16, 0x73, 0x5e, 0xc8, 0xad, 0xd7, 0xf1, 0xb5, 0x08, 0xda, 0x13,
	0x48, 0xdf, 0x79, 0x41, 0xd0, 0xdb, 0x80, 0x62, 0xfe, 0xf0, 0x28, 0xf4, 0x8e, 0x25, 0xbd, 0x20,
	0xe8, 0x6a, 0x84, 0x6c, 0x71, 0x80, 0xb3, 0x0d, 0x13, 0xd0, 0x96, 0x4f, 0xec, 0x80, 0xec, 0xd3,
	0x89, 0x33, 0x8c, 0xd3, 0x39, 0x11, 0x52, 0xc9, 0x0a, 0x79, 0x0b, 0x20, 0xe0, 0x2c, 0xcb, 0xb3,
	0xdd, 0x58, 0xfb, 0x8a, 0xb0, 0x74, 0x6d, 0x97, 0x18, 0x1f, 0xc2, 0xf2, 0x54, 0xa8, 0xcb, 0x1e,
	0x9f, 0xf1, 0x08, 0x96, 0xb7, 0x09, 0x0b, 0x7c, 0x7a, 0x72, 0xf5, 0xc5, 0x7c, 0x04, 0x2b, 0xd3,
	0xb1, 0x2e, 0xbd, 0x9a, 0x1f, 0x15, 0x68, 0xec, 0xc9, 0x84, 0xb8, 0xca, 0x4a, 0xd0, 0xbb, 0xb0,
	0x1a, 0x7a, 0xce, 0xb3, 0x90, 0x58, 0x8c, 0x87, 0xf1, 0x86, 0xc4, 0xf2, 0x42, 0x77, 0x40, 0x7c,
	0x91, 0x75, 0x45, 0xbc, 0x22, 0xd1, 0x7e, 0x04, 0x76, 0x05, 0xc6, 0xa7, 0x62, 0x81, 0xed, 0x07,
	0x22, 0xcf, 0xca, 0x58, 0x0e, 0x90, 0x0a, 0x05, 0xe2, 0x8d, 0xb4, 0x05, 0x61, 0xe3, 0x9f, 0x7c,
	0xfd, 0x13, 0xfb, 0x64, 0x4c, 0xed, 0x91, 0xb6, 0xb8, 0xae, 0xb4, 0x6a, 0x38, 0x1e, 0x1a, 0xdf,
	0x29, 0xb0, 0x94, 0xac, 0xff, 0xd2, 0x57, 0xe9, 0xbf, 0x5a, 0xf5, 0x4f, 0x0a, 0xa8, 0xc9, 0xed,
	0x7b, 0x23, 0x75, 0xff, 0x5e, 0x81, 0x6b, 0x99, 0x1d, 0xbc, 0x31, 0xca, 0xbf, 0x05, 0xf5, 0x7e,
	0x60, 0x07, 0x21, 0x3b, 0x57, 0x75, 0xe3, 0xab, 0x12, 0x34, 0x62, 0xde, 0xa5, 0xf7, 0x76, 0x07,
	0xd4, 0xa1, 0x78, 0x22, 0x46, 0xd6, 0xc8, 0x0e, 0x48, 0xe0, 0xb8, 0x24, 0x7a, 0xab, 0x97, 0x22,
	0xfb, 0x76, 0x64, 0xe6, 0xcf, 0xd8, 0xd8, 0x66, 0x81, 0x15, 0xb2, 0x2c, 0x59, 0x3e, 0xd4, 0x2a,
	0x47, 0x0e, 0x58, 0x86, 0x7d, 0x1b, 0xaa, 0x82, 0xe8, 0x12, 0x97, 0xfa, 0x27, 0x42, 0x84, 0x3a,
	0x06, 0x6e, 0xda, 0x15, 0x16, 0xf4, 0x3f, 0xa8, 0x05, 0x34, 0xb0, 0xc7, 0x31, 0x63, 0x41, 0x30,
	0xaa, 0xc2, 0x16, 0x51, 0xd6, 0xa0, 0x22, 0x27, 0x73, 0xd8, 0xb1, 0x10, 0xa7, 0x8e, 0xcb, 0xdc,
	0xb0, 0xed, 0xb0, 0x63, 0x99, 0x6c, 0xdc, 0x5f, 0xa0, 0x65, 0x81, 0x56, 0x84, 0x45, 0xc0, 0x77,
	0x61, 0x45, 0x1e, 0x92, 0x45, 0x9f, 0x5a, 0x87, 0xd4, 0xa7, 0x61, 0xe0, 0x78, 0x84, 0x69, 0x15,
	0x41, 0x44, 0x12, 0xeb, 0x3d, 0xfd, 0x24, 0x41, 0x50, 0x0b, 0xd4, 0xd4, 0x43, 0x64, 0x2d, 0xd3,
	0x40, 0xb0, 0x1b, 0x31, 0x5b, 0xbc, 0x5c, 0x8c, 0x17, 0x80, 0x94, 0x99, 0x94, 0x28, 0xad, 0x2a,
	0x0b, 0x40, 0x4c, 0xde, 0x8b, 0x81, 0xe9, 0xb5, 0xa4, 0xf5, 0x4e, 0xab, 0x4d, 0xaf, 0x25, 0xad,
	0x71, 0xe8, 0x01, 0xac, 0x65, 0x66, 0xf0, 0xe9, 0x90, 0x30, 0x2e, 0x04, 0x0b, 0x7c, 0x62, 0xbb,
	0x4c, 0xab, 0x0b, 0x47, 0x2d, 0x99, 0x29, 0x26, 0xf4, 0x25, 0x3e, 0xcf, 0x5d, 0x56, 0x2b, 0xa6,
	0x35, 0xe6, 0xb8, 0xcb, 0x9a, 0xc5, 0xd0, 0x07, 0x70, 0x83, 0x97, 0xa8, 0xd9, 0xce, 0x4b, 0xc2,
	0x79, 0x95, 0x13, 0xce, 0xba, 0x1a, 0x77, 0xe0, 0x1a, 0xcf, 0x45, 0x87, 0x05, 0xce, 0xf0, 0x82,
	0xbc, 0xfd, 0x65, 0x11, 0x50, 0x96, 0x7b, 0xe9, 0xdc, 0xbd, 0x0f, 0x0b, 0xd1, 0x31, 0x15, 0xd6,
	0x0b, 0xad, 0xea, 0x86, 0x91, 0x96, 0xfe, 0xb3, 0x71, 0xdb, 0xb2, 0xea, 0x44, 0x1e, 0xfa, 0xb7,
	0x0a, 0x2c, 0xef, 0x9d, 0x6d, 0x2e, 0x2e, 0x12, 0x3e, 0x7f, 0x35, 0xe1, 0x0b, 0xe7, 0x0b, 0xaf,
	0xff, 0x50, 0x82, 0x92, 0x58, 0x27, 0x42, 0x50, 0x14, 0x8f, 0xa8, 0x54, 0x4c, 0x7c, 0xcf, 0xbc,
	0xab, 0xf9, 0xcb, 0xdc, 0xd5, 0xc2, 0x9c, 0xbb, 0x8a, 0x01, 0x92, 0x2c, 0x66, 0x5a, 0x51, 0x88,
	0xb9, 0x71, 0xb1, 0x98, 0xed, 0x44, 0x40, 0xd6, 0xf1, 0x02, 0xff, 0x04, 0x67, 0xa2, 0xa0, 0x03,
	0xa8, 0xa6, 0x99, 0xce, 0xb4, 0x92, 0x08, 0x7a, 0xef, 0x1f, 0x04, 0x4d, 0x0f, 0x23, 0x8a, 0x9a,
	0x8d, 0x73, 0xd1, 0xf9, 0x2c, 0x5c, 0xed, 0x7c, 0x16, 0xaf, 0x72, 0x31, 0xca, 0xe7, 0x5d, 0x0c,
	0x9d, 0x26, 0xb5, 0x3f, 0xde, 0x18, 0xaf, 0x05, 0xc7, 0xe4, 0x24, 0x3a, 0x62, 0xfe, 0x89, 0x3e,
	0x86, 0xd2, 0x73, 0x7b, 0x1c, 0xca, 0x63, 0xad, 0x6e, 0xdc, 0x3d, 0x57, 0xae, 0x19, 0xe9, 0x8b,
	0xa5, 0xfb, 0xfd, 0xfc, 0xfb, 0x8a, 0x3e, 0xc9, 0x94, 0xed, 0x7f, 0x65, 0xc6, 0x8d, 0x2f, 0x8b,
	0x50, 0xfe, 0x8c, 0xfa, 0xee, 0x11, 0xff, 0x5f, 0x72, 0x1f, 0x4a, 0xa2, 0xff, 0x46, 0xab, 0xb3,
	0xff, 0x03, 0xe9, 0xd7, 0xe7, 0x34, 0xea, 0x46, 0x0e, 0xed, 0x40, 0x35, 0xd3, 0xb7, 0xa2, 0x9b,
	0x29, 0xf3, 0x6c, 0x67, 0xac, 0xdf, 0x9a, 0x83, 0x26, 0xd1, 0x7a, 0x50, 0xcb, 0x36, 0x9e, 0x28,
	0xe3, 0x30, 0xa3, 0xb9, 0xd5, 0x9b, 0xf3, 0xe0, 0x24, 0xe0, 0x36, 0x2c, 0x46, 0x4a, 0x20, 0x2d,
	0x25, 0x4f, 0x77, 0xa6, 0xfa, 0x8d, 0x19, 0x48, 0x1c, 0xa1, 0xa5, 0xdc, 0x55, 0xd0, 0x23, 0xa8,
	0x24, 0x32, 0x22, 0x3d, 0xa3, 0xfb, 0xdf, 0x7a, 0x2d, 0x7d, 0x6d, 0x26, 0x36, 0x15, 0xeb, 0x01,
	0x2c, 0xc8, 0x0e, 0x00, 0x5d, 0x9f, 0x3e, 0xc0, 0xa4, 0x77, 0xd0, 0xb5, 0xb3, 0x40, 0xb2, 0x21,
	0x13, 0x20, 0x3d, 0x6d, 0xb4, 0x36, 0x3b, 0x07, 0x64, 0x98, 0x9b, 0xe7, 0x25, 0x88, 0x91, 0xdb,
	0xd4, 0x7e, 0x7e, 0xdd, 0x54, 0x5e, 0xbe, 0x6e, 0x2a, 0xbf, 0xbf, 0x6e, 0x2a, 0xdf, 0x9c, 0x36,
	0x73, 0x2f, 0x4f, 0x9b, 0xb9, 0x57, 0xa7, 0xcd, 0xdc, 0x60, 0x41, 0x38, 0xde, 0xfb, 0x2b, 0x00,
	0x00, 0xff, 0xff, 0x4d, 0x87, 0x0b, 0xab, 0xc2, 0x0f, 0x00, 0x00,
}
